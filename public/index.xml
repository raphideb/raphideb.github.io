<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Hi there! on raphi&#39;s corner</title>
    <link>//localhost:1313/</link>
    <description>Recent content in Hi there! on raphi&#39;s corner</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>active session history</title>
      <link>//localhost:1313/oracle/ash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/oracle/ash/</guid>
      <description>&lt;h2 id=&#34;ash---active-session-history&#34;&gt;ASH - Active Session History&lt;/h2&gt;&#xA;&lt;img src=&#34;//localhost:1313/oracle/ash.jpg&#34; alt=&#34;active_session_history&#34; width=&#34;25%&#34; height=&#34;25%&#34;/&gt;&#xA;&lt;p&gt;The view &lt;strong&gt;gv$active_session_history&lt;/strong&gt; (ASH) records in memory every second the wait events of all active sessions. It is the single most important source of information for deep performance analysis on a session or even query level, like what a session was doing in a particular moment in time, what queries it was executing or which other sessions were blocking it. For all the data it contains it is surprisingly easy to use. First I will explain how the ASH works and what fields it provides, then I show you a basic script and how to extend it with all sorts of queries to get the info that you need.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pgbench</title>
      <link>//localhost:1313/postgres/pgbench/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/postgres/pgbench/</guid>
      <description>&lt;h2 id=&#34;the-postgresql-benchmark-utility&#34;&gt;The PostgreSQL benchmark utility&lt;/h2&gt;&#xA;&lt;img class=&#34;floatimg&#34; src=&#34;//localhost:1313/postgres/pgbench.jpg&#34; alt=&#34;elephant&#34; width=&#34;25%&#34; height=&#34;25%&#34;/&gt;&#xA;&lt;br&gt;&lt;br&gt;&#xA;&lt;p&gt;Including a benchmark utility with a database product demonstrates a strong commitment to performance and transparency. For PostgreSQL, the built-in tool is pgbench, which allows users to test various aspects of the database system. Not only that, it can also run benchmarks on any set of tables with any script that you created yourself, making it the perfect tool to benchmark a specific application workload.&#xA;&lt;p&gt;The official documentation is here: &lt;a href=&#34;https://www.postgresql.org/docs/current/pgbench.html&#34;&gt;https://www.postgresql.org/docs/current/pgbench.html&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ashtop</title>
      <link>//localhost:1313/oracle/ashtop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/oracle/ashtop/</guid>
      <description>&lt;h2 id=&#34;ashtop---the-swiss-army-knife-for-ash&#34;&gt;ashtop - the Swiss Army Knife for ASH&lt;/h2&gt;&#xA;&lt;img class=&#34;floatimg&#34; src=&#34;//localhost:1313/oracle/ashtop.jpg&#34; alt=&#34;ashtop&#34; width=&#34;20%&#34; height=&#34;20%&#34;/&gt;&#xA;&lt;p&gt;&#xA;Tanel Poder&#39;s script &#34;ashtop.sql&#34; greatly simplifies querying ASH and is essentially a fully parameterizable &#34;grep&#34; for ASH. The script comes in two variants:  &#xA;&lt;p&gt;ashtop.sql  → for querying ASH: &lt;code&gt;gv$active_session_history&lt;/code&gt;&lt;br&gt;&#xA;dashtop.sql → for querying DASH: &lt;code&gt;dba_hist_active_sess_history&lt;/code&gt;&lt;/p&gt;&#xA;&lt;p&gt;Both scripts are in the &amp;ldquo;ash&amp;rdquo; directory of Tanel&amp;rsquo;s github: &lt;a href=&#34;https://github.com/tanelpoder/tpt-oracle&#34;&gt;https://github.com/tanelpoder/tpt-oracle&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;strong&gt;Pro tip:&lt;/strong&gt; do yourself a favour and download the whole repository. There are many, many more very useful scripts for all kinds of DBA tasks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>pgstat_snap</title>
      <link>//localhost:1313/postgres/pgstat_snap/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/postgres/pgstat_snap/</guid>
      <description>&lt;h1 id=&#34;purpose-of-this-script&#34;&gt;Purpose of this script&lt;/h1&gt;&#xA;&lt;p&gt;The cumulative statistics system (CSS) in PostgreSQL and pg_stat_statements in particular lack any timing information, all values are cumulative and the only way to figure out the difference between query executions is to reset the stats every time or work with averages.&lt;/p&gt;&#xA;&lt;p&gt;With the pgstat_snap extension, you can create timestamped snapshots of pg_stat_statements and pg_stat_activity when needed. It also provides views that show the difference between every snapshot for every query and database.&lt;/p&gt;</description>
    </item>
    <item>
      <title>other stuff</title>
      <link>//localhost:1313/stuff/stuff/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/stuff/stuff/</guid>
      <description>&lt;p&gt;nothing to see here yet.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
